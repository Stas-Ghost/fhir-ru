
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = ResourceValidationMode
  Binding = code list
  Reference = #resource-validation-mode
  Definition = Codes indicating the type of validation to perform
  Conformance = required

=== Sheet resource-validation-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = create
  Display = Validate for Create
  Definition = The server checks the content, and then checks that the content would be acceptable as a create (e.g. that the content would not violate any uniqueness constraints).

 -- Row 2 -----------------------------------
  Id = 2
  Code = update
  Display = Validate for Update
  Definition = The server checks the content, and then checks that it would accept it as an update against the nominated specific resource (e.g. that there are no changes to immutable fields the server does not allow to change, and checking version integrity if appropriate).

 -- Row 3 -----------------------------------
  Id = 3
  Code = delete
  Display = Validate for Delete
  Definition = The server ignores the content, and checks that the nominated resource is allowed to be deleted (e.g. checking referential integrity rules).

=== Sheet Invariants =====================================

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = Resource
  Short Label = Base Resource
  Definition = This is the base resource type for everything.
  RIM Mapping = Entity. Role, or Act

 -- Row 2 -----------------------------------
  Element = Resource.id
  Card. = 0..1
  Summary = Y
  Type = id
  Short Label = Logical id of this artifact
  Definition = The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes
  Comments = The only time that a resource does not have an id is when it is being submitted to the server using a create operation. Bundles always have an id, though it is usually a generated UUID

 -- Row 3 -----------------------------------
  Element = Resource.meta
  Card. = 0..1
  Summary = Y
  UML = 200;0
  Type = Meta
  Short Label = Metadata about the resource
  Definition = The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource

 -- Row 4 -----------------------------------
  Element = Resource.implicitRules
  Card. = 0..1
  Is Modifier = y
  Summary = Y
  Type = uri
  Short Label = A set of rules under which this content was created
  Definition = A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
  Comments = Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element as much as possible

 -- Row 5 -----------------------------------
  Element = Resource.language
  Card. = 0..1
  Type = code
  Binding = Language
  Short Label = Language of the resource content
  Definition = The base language in which the resource is written
  Comments = Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource  Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute)

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = _id
  Type = token
  Path = Resource.id

 -- Row 2 -----------------------------------
  Name = _lastUpdated
  Type = date
  Path = Resource.meta.lastUpdated

 -- Row 3 -----------------------------------
  Name = _tag
  Type = token
  Path = Resource.meta.tag

 -- Row 4 -----------------------------------
  Name = _profile
  Type = uri
  Path = Resource.meta.profile

 -- Row 5 -----------------------------------
  Name = _security
  Type = token
  Path = Resource.meta.security

 -- Row 6 -----------------------------------
  Name = _text
  Type = string
  Description = Search on the narrative of the resource

 -- Row 7 -----------------------------------
  Name = _content
  Type = string
  Description = Search on the entire content of the resource

 -- Row 8 -----------------------------------
  Name = _query
  Type = token
  Description = A custom search profile that describes a specific defined query operation

=== Sheet Profiles =====================================

=== Sheet Examples =====================================

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = validate
  Use = Resource | Instance
  Documentation = The validate operation checks whether the attached content would be acceptable either generally, as a create, an update or as a delete to an existing resource.  The action the server takes depends on the mode parameter:  \n\n* [mode not provided]: The server checks the content of the resource against any schema, constraint rules, and other general terminology rules \n* create: The server checks the content, and then checks that the content would be acceptable as a create (e.g. that the content would not violate any uniqueness constraints) \n* update: The server checks the content, and then checks that it would accept it as an update against the nominated specific resource (e.g. that there are no changes to immutable fields the server does not allow to change, and checking version integrity if appropriate) \n* delete: The server ignores the content, and checks that the nominated resource is allowed to be deleted (e.g. checking referential integrity rules)  \n\nModes update and delete can only be used when the operation is invoked at the resource instance level.   The return from this operation is an [[[OperationOutcome]]]
  Type = operation
  Example.Request = $validate-request.txt
  Example.Response = $validate-response.txt
  Title = Validate a resource
  Footer = This operation may be used during design and development to validate application design. It can also be used at run-time. One possible use might be that a client asks the server whether a proposed update is valid as the user is editing a dialog and displays an updated error to the user. The operation can be used as part of a light-weight two phase commit protocol but there is no expectation that the server will hold the content of the resource after this operation is used, or that the server guarantees to successfully perform an actual create, update or delete after the validation operation completes.\n\nThis operation returns a 200 OK whether or not the resource is valid. A 4xx or 5xx error means that the validation itself could not be performed, and it is unknown whether the resource is valid or not.

 -- Row 2 -----------------------------------
  Name = validate.resource
  Use = in
  Documentation = Must be present unless the mode is \"delete\"
  Type = Resource
  Title = The resource to validate
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = validate.mode
  Use = in
  Documentation = Default is \'no action\'; (e.g. general validation)
  Type = code
  Title = What kind of validation to perform
  Min = 0
  Max = 1
  Binding = ResourceValidationMode

 -- Row 4 -----------------------------------
  Name = validate.profile
  Use = in
  Documentation = If this is nominated, then the resource is validated against this specific profile. If a profile is nominated, and the server cannot validate against the nominated profile, it SHALL return an error
  Type = uri
  Title = Literal or logical uri of a profile
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = validate.return
  Use = out
  Documentation = If the operation outcome does not list any errors, and a mode was specified, then this is an indication that the operation would be expected to succeed (excepting for transactional integrity issues, see below)
  Type = OperationOutcome
  Title = The outcome of the validation operation
  Min = 1
  Max = 1

 -- Row 6 -----------------------------------
  Name = meta
  Use = System | Resource | Instance
  Documentation = This operation retrieves a summary of the profiles, tags, and security labels for the given scope; e.g. for each scope:  \n\n* system-wide: a list of all profiles, tags and security labels in use by the system \n* resource-type level: A list of all profiles, tags, and security labels for the resource type \n* individual resource level: A list of all profiles, tags, and security labels for the current version of the resource.  Also, as a special case, this operation (and other meta operations) can be performed on a historical version of a resource)
  Type = operation
  Example.Request = $meta-request.txt
  Example.Response = $meta-response.txt
  Title = Access a list of profiles, tags, and security labels
  Footer = At the system and type levels, the $meta operation is used to get a summary of all the labels that are in use across the system. The principle use for this operation is to support search e.g. what tags can be searched for. At these levels, the meta will not contain versionId, lastUpdated etc. Systems are not obligated to implement the operation at this level (and should return a 4xx error if they don\'t). At the resource and historical entry level, the $meta operation returns the same meta as would be returned by accessing the resource directly. This can be used to allow a system to get access to the meta-information for the resource without accessing the resource itself, e.g. for security reasons

 -- Row 7 -----------------------------------
  Name = meta.return
  Use = out
  Documentation = The meta returned by the operation
  Type = Meta
  Title = The meta returned by the operation
  Min = 1
  Max = 1

 -- Row 8 -----------------------------------
  Name = meta-add
  Use = Instance
  Documentation = This operation takes a meta, and adds the profiles, tags, and security labels found in it to the nominated resource.   This operation can also be used on historical entries - to update them without creating a different historical version
  Type = operation
  Example.Request = $meta-add-request.txt
  Example.Response = $meta-add-response.txt
  Title = Add profiles, tags, and security labels to a resource
  Footer = This operation is special in that executing this operation does not cause a new version of the resource to be created. The meta is updated directly. This is because the content in meta does not affect the meaning of the resource, and the security labels (in particular) are used to apply access rules to existing versions of resources

 -- Row 9 -----------------------------------
  Name = meta-add.meta
  Use = in
  Documentation = Profiles, tags, and security labels to add to the existing resource. Note that profiles, tags, and security labels are sets, and duplicates are not created.  The identity of a tag or security label is the system+code. When matching existing tags during adding, version and display are ignored. For profiles, matching is based on the full URL
  Type = Meta
  Title = Profiles, tags, and security labels to add
  Min = 1
  Max = 1

 -- Row 10 -----------------------------------
  Name = meta-add.return
  Use = out
  Documentation = Resulting meta for the resource
  Type = Meta
  Title = Resulting meta for the resource
  Min = 1
  Max = 1

 -- Row 11 -----------------------------------
  Name = meta-delete
  Use = Instance
  Documentation = This operation takes a meta, and deletes the profiles, tags, and security labels found in it from the nominated resource.   This operation can also be used on historical entries
  Type = operation
  Example.Request = $meta-delete-request.txt
  Example.Response = $meta-delete-response.txt
  Title = Delete profiles, tags, and security labels for a resource
  Footer = This operation is special in that executing this operation does not cause a new version of the resource to be created. The meta is updated directly. This is because the content in meta does not affect the meaning of the resource, and the security labels (in particular) are used to apply access rules to existing versions of resources

 -- Row 12 -----------------------------------
  Name = meta-delete.meta
  Use = in
  Documentation = Profiles, tags, and security labels to delete from the existing resource. It is not an error if these tags, profiles, and labels do not exist.  The identity of a tag or security label is the system+code. When matching existing tags during deletion, version and display are ignored. For profiles, matching is based on the full URL
  Type = Meta
  Title = Profiles, tags, and security labels to delete
  Min = 1
  Max = 1

 -- Row 13 -----------------------------------
  Name = meta-delete.return
  Use = out
  Documentation = Resulting meta for the resource
  Type = Meta
  Title = Resulting meta for the resource
  Min = 1
  Max = 1

 -- Row 14 -----------------------------------
  Name = cds-hook
  Use = System
  Documentation = It represents an outbound call from the EHR, in the context of a user session, and in the context of a specific activity within that user sesssion (e.g. opening a patient record; prescribing a new med; or reviewing orders before signing them).
  Type = operation
  Title = The CDS Hook operation is the core API request for CDS Hooks
  Min = 1
  Max = 1

 -- Row 15 -----------------------------------
  Name = cds-hook.activity
  Use = in
  Documentation = Name of the Activity (expressed as a coding, preferably drawn from SMART\'s activity catalog) that the user is performing in the EHR, and for which this hook was triggered (e.g. patient-view, or medication-prescribe)
  Type = Coding
  Title = Activity that the user is performing
  Min = 1
  Max = 1

 -- Row 16 -----------------------------------
  Name = cds-hook.activityInstance
  Use = in
  Documentation = While working in the EHR, a user can perform multiple activities in series or in parallel. For example, a clinician might prescribe two drugs in a row; each prescription activity would be assigned a unique activityInstance. The activity catalog provides a description of what events should initiate and terminate a given activity. This allows an external service to associate requests with activity state, which is necessary to support the following app-centric decision sequence, where the steps are tied together by a common activityInstance:\n\nEHR invokes CDS hook\nCDS service returns app link card\nUser clicks app link and interacts with app\nFlow returns to EHR, which re-invokes CDS hook\nCDS service returns decision with user\'s choice\nNote: the activityInstance is globally unique and should contain enough entropy to be un-guessable.
  Type = string
  Title = links multiple cds-hook calls together
  Min = 1
  Max = 1

 -- Row 17 -----------------------------------
  Name = cds-hook.fhirServer
  Use = in
  Documentation = Base URL for the calling EHR\'s FHIR server. The scheme should be https
  Type = uri
  Title = Base URL for the calling EHR\'s FHIR server
  Min = 0
  Max = 1

 -- Row 18 -----------------------------------
  Name = cds-hook.oauth
  Use = in
  Documentation = Security details allowing the CDS service to connect to the EHR\'s FHIR server. These fields allow the CDS service to access EHR data in a context limited by the current user\'s privileges
  Type = Tuple
  Title = Allow the CDS service to connect to the EHR\'s FHIR server
  Min = 0
  Max = 1

 -- Row 19 -----------------------------------
  Name = cds-hook.oauth.token
  Documentation = is a bearer token to be presented with any API calls the CDS service makes to the EHR, by including it in an Authorization header like:\n\nAuthorization: Bearer {{token}}
  Type = string
  Title = a bearer token to be presented by the CDS service to the EHR
  Min = 1
  Max = 1

 -- Row 20 -----------------------------------
  Name = cds-hook.oauth.scope
  Documentation = Represents the set of scopes assigned to this token (see SMART on FHIR scopes)
  Type = string
  Title = Represents the set of scopes assigned to this token (see SMART on FHIR scopes)
  Min = 1
  Max = 1

 -- Row 21 -----------------------------------
  Name = cds-hook.oauth.expires
  Documentation = Expresses the token lifetime as an integer number of seconds
  Type = integer
  Title = Expresses the token lifetime as an integer number of seconds
  Min = 1
  Max = 1

 -- Row 22 -----------------------------------
  Name = cds-hook.redirect
  Use = in
  Documentation = This field is only used by services that will return an app link card: when a user clicks the card\'s link to launch an app, it becomes the app\'s job to send the user to this redirect URL upon completion of user interaction. (Design note: this field is supplied up-front, as part of the initial request, to avoid requiring the EHR to append any content to app launch links. This helps support an important \"degenerate\" use case for app link cards: pointing to static content. See below for details.)
  Type = uri
  Title = Used by services that will return an app link card
  Min = 1
  Max = 1

 -- Row 23 -----------------------------------
  Name = cds-hook.user
  Use = in
  Type = string
  Title = The FHIR resource type + id representing the current user
  Min = 0
  Max = 1

 -- Row 24 -----------------------------------
  Name = cds-hook.patient
  Use = in
  Documentation = The FHIR resource id of the current patient. For example, 123.
  Type = id
  Title = The FHIR resource id of the current patient
  Min = 0
  Max = 1

 -- Row 25 -----------------------------------
  Name = cds-hook.encounter
  Use = in
  Documentation = The FHIR resource id of the current encounter. For example, 123
  Type = id
  Title = The FHIR resource id of the current encounter
  Min = 0
  Max = 1

 -- Row 26 -----------------------------------
  Name = cds-hook.context
  Use = in
  Documentation = activity-specific contextual data (see Activity) that an external service needs. (For exampe, with the order-review activity this will include MedicationOrder and Diagnostic resources, among others)
  Type = Any
  Title = activity-specific contextual data that an external service needs
  Min = 0
  Max = *

 -- Row 27 -----------------------------------
  Name = cds-hook.preFetchData
  Use = in
  Documentation = as a performance tweak, the EHR may pass along data according to the service\'s Prefetch-Template. This helps provide the service with all the data it needs to efficiently compute a set of recommendations. (Note that in the absence of preFetchData, an external service can always execute FHIR REST API calls against the EHR server to obtain additional data ad-hoc.)
  Type = Bundle
  Title = prefetch data per config
  Min = 0
  Max = 1

 -- Row 28 -----------------------------------
  Name = cds-hook.card
  Use = in
  Documentation = one CDS result for the EHR to present to the user. Cards can provide a combination of information (for reading), suggested actions (to be applied if a user selects them), and links (to launch an app if the user selects them). The EHR decides how to display cards, but we recommend displaying suggestions using buttons, and links using underlined text.
  Type = Tuple
  Title = one CDS result for the EHR to present to the user
  Min = 1
  Max = 1

 -- Row 29 -----------------------------------
  Name = cds-hook.card.summary
  Documentation = one-sentence, <140-character summary message for display to the user inside of this card.
  Type = string
  Title = one-sentence, <140-character summary message for display to the user inside of this card.
  Min = 1
  Max = 1

 -- Row 30 -----------------------------------
  Name = cds-hook.card.detail
  Documentation = optional detailed information to display, represented in Markdown. (For non-urgent cards, the EHR may hide these details until the user clicks a link like \"view more details...\".)
  Type = string
  Title = optional detailed information to display, represented in Markdown
  Min = 0
  Max = 1

 -- Row 31 -----------------------------------
  Name = cds-hook.card.indicator
  Documentation = Urgency/importance of what this card conveys. Allowed values, in order of increasing urgency, are: success, info, warning, hard-stop. The EHR can use this field to help make UI display decisions such as sort order or coloring. The value hard-stop indicates that the workflow should not be allowed to proceed.R[-12]C
  Type = code
  Title = Urgency/importance of what this card conveys.
  Min = 1
  Max = 1

 -- Row 32 -----------------------------------
  Name = cds-hook.card.source
  Documentation = grouping structure for a short, human-readable description (in source.label) of the source of the information displayed on this card, with an optional link (in source.url) where the user can learn more about the organization or data set that provided the information on this card. Note that source.url should not be used to supply a context-specific \"drill-down\" view of the information on this card. For that, use link.url instead.
  Type = Tuple
  Title = grouping structure for a short, human-readable description
  Min = 1
  Max = 1

 -- Row 33 -----------------------------------
  Name = cds-hook.card.source.label
  Documentation = human-readable description (in source.label) of the source of the information displayed on this card
  Type = string
  Title = human-readable description (in source.label) of the source of the information displayed on this card
  Min = 1
  Max = 1

 -- Row 34 -----------------------------------
  Name = cds-hook.card.source.url
  Documentation = Link (in source.url) where the user can learn more about the organization or data set that provided the information on this card
  Type = uri
  Title = Link (in source.url) where the user can learn more about the organization or data set that provided the information on this card
  Min = 0
  Max = 1

 -- Row 35 -----------------------------------
  Name = cds-hook.card.suggestion
  Documentation = grouping structure for suggestion cards, which allow a service to suggest a set of changes in the context of the current activity (e.g. changing the dose of the medication currently being prescribed, for the medication-prescribe activity)
  Type = Tuple
  Title = grouping structure for suggestion cards, which allow a service to suggest a set of changes in the context of the current activity (e.g. changing the dose of the medication currently being prescribed, for the medication-prescribe activity)
  Min = 0
  Max = *

 -- Row 36 -----------------------------------
  Name = cds-hook.card.suggestion.label
  Documentation = human-readable label to display for this suggestion (e.g. the EHR might render this as the text on a button tied to this suggestion).
  Type = string
  Title = human-readable label to display for this suggestion (e.g. the EHR might render this as the text on a button tied to this suggestion).
  Min = 0
  Max = 1

 -- Row 37 -----------------------------------
  Name = cds-hook.card.suggestion.create
  Documentation = new resource(s) that this suggestion applies within the current activity (e.g. for medication-prescribe, this holds the updated prescription as proposed by the suggestion).
  Type = Resource
  Title = new resource(s) that this suggestion applies within the current activity (e.g. for medication-prescribe, this holds the updated prescription as proposed by the suggestion).
  Min = 0
  Max = *

 -- Row 38 -----------------------------------
  Name = cds-hook.card.suggestion.delete
  Documentation = id(s) of any resources to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove orders from the pending list). In activities like medication-prescribe where only one \"content\" resource is ever relevant, this field may be omitted
  Type = id
  Title = id(s) of any resources to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove orders from the pending list). In activities like medication-prescribe where only one \"content\" resource is ever relevant, this field may be omitted
  Min = 0
  Max = *

 -- Row 39 -----------------------------------
  Name = cds-hook.card.link
  Documentation = grouping structure for a link to an app that the user might want to run for additional information or to help guide a decision
  Type = Tuple
  Title = grouping structure for a link to an app that the user might want to run for additional information or to help guide a decision
  Min = 0
  Max = *

 -- Row 40 -----------------------------------
  Name = cds-hook.card.link.label
  Documentation = human-readable label to display for this link (e.g. the EHR might render this as the underlined text of a clickable link)
  Type = string
  Title = human-readable label to display for this link (e.g. the EHR might render this as the underlined text of a clickable link)
  Min = 0
  Max = 1

 -- Row 41 -----------------------------------
  Name = cds-hook.card.link.url
  Documentation = URL to load when a user clicks on this link. Note that this may be a \"deep link\" with context embedded in path segments, query parameters, or a hash. In general this URL should embed enough context for the app to determine the activityInstance, and redirect url upon downstream launch, because the EHR will simply use this url as-is, without appending any parameters at launch time.
  Type = uri
  Title = URL to load when a user clicks on this link
  Min = 0
  Max = 1

 -- Row 42 -----------------------------------
  Name = cds-hook.decision
  Use = out
  Documentation = grouping structure representing a decision to be applied directly to the user session. Note that a CDS service may only return a decision after interacting with the user through an app link. Decisions are designed to convey any choices the user made in an app session
  Type = Tuple
  Title = Grouping structure representing a decision to be applied directly to the user session
  Min = 0
  Max = *

 -- Row 43 -----------------------------------
  Name = cds-hook.decision.create
  Documentation = new resource(s) that the EHR should create within the current activity (e.g. for medication-prescribe, this would be the updated prescription that a user had authored in an app session).
  Type = Resource
  Title = new resource(s) that the EHR should create within the current activity (e.g. for medication-prescribe, this would be the updated prescription that a user had authored in an app session).
  Min = 0
  Max = *

 -- Row 44 -----------------------------------
  Name = cds-hook.decision.delete
  Documentation = id(s) of any resources to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove orders from the pending list). In activities like medication-prescribe where only one \"content\" resource is ever relevant, this field may be omitted
  Type = id
  Title = id(s) of any resources to remove from the current activity (e.g. for the order-review activity, this would provide a way to remove orders from the pending list)
  Min = 0
  Max = *
