// entries in this file get added to the generated class. "Class" in the line above is just the plain Class name e.g. BaseConformance
// whatever is between -- [Class] --------- and ---- will be added to the generated class without modification

-- Element --
  public void addExtension(String url, Type value) {
    Extension ex = new Extension();
    ex.setUrl(url);
    ex.setValue(value);
    getExtension().add(ex);    
  }

----

-- BaseConformance --

  @Override
  public String toString() {
    return getUrl();
  }
  
----

-- ElementDefinition.imports --
import org.hl7.fhir.utilities.CommaSeparatedStringBuilder;

----

// todo: should this be .getId()> 
-- ElementDefinition --
  
  public String toString() {
    if (hasId())
      return getId();
    if (hasSliceName())
      return getPath()+":"+getSliceName();
    else
      return getPath();
  }
    
  public void makeBase(String path, int min, String max) {
    ElementDefinitionBaseComponent self = getBase();
    self.setPath(path);
    self.setMin(min);
    self.setMax(max);
  }
  
  
  public String typeSummary() {
    CommaSeparatedStringBuilder b = new CommaSeparatedStringBuilder();
    for (TypeRefComponent tr : type) {
      if (tr.hasCode())
        b.append(tr.getCode());
    }
    return b.toString();
   }
  

----


-- StructureMap.imports --
import org.hl7.fhir.r4.utils.StructureMapUtilities;
----
  
-- StructureMap --

  public String toString() {
    return StructureMapUtilities.render(this);
  }

----

-- StructureMapGroupComponent --

  public String toString() {
    return StructureMapUtilities.groupToString(this);
  }

----

-- StructureMapGroupRuleComponent --

  public String toString() {
    return StructureMapUtilities.ruleToString(this);
  }

----

-- StructureMapGroupRuleSourceComponent --

  public String toString() {
    return StructureMapUtilities.sourceToString(this);
  }

----

-- StructureMapGroupRuleTargetComponent --

  public String toString() {
    return StructureMapUtilities.targetToString(this);
  }

----


-- StructureMapGroupRuleTargetParameterComponent --

  public String toString() {
    return StructureMapUtilities.paramToString(this);
  }

----



-- StructureMapGroupRuleTargetParameterComponent --

      public String toString() {
        return value == null ? "null!" : value.toString();
      }


----


-- MetadataResource --
      @Override
      public String toString() {
        return fhirType()+"["+getUrl()+"]";
      }
----

-- BackboneElement --

  public void checkNoModifiers(String noun, String verb) throws FHIRException {
        if (hasModifierExtension()) {
          throw new FHIRException("Found unknown Modifier Exceptions on "+noun+" doing "+verb);
        }
        
  }
----

-- DomainResource --

  public void checkNoModifiers(String noun, String verb) throws FHIRException {
        if (hasModifierExtension()) {
          throw new FHIRException("Found unknown Modifier Exceptions on "+noun+" doing "+verb);
        }
        
  }

  public void addExtension(String url, Type value) {
    Extension ex = new Extension();
    ex.setUrl(url);
    ex.setValue(value);
    getExtension().add(ex);    
  }
----

-- CodeType.implements --
ICoding    
----

-- Coding.implements --
ICoding
----

-- Quantity.implements --
ICoding    
----

-- CodeType --

	private String system;
	
  @Override
  public String getSystem() {
    return system;
  }

  @Override
  public boolean hasSystem() {
    return system != null;
  }
  
  public CodeType setSystem(String system) {
    this.system = system;
    return this;
  }

  @Override
  public String getVersion() {
    return null;
  }

  @Override
  public boolean hasVersion() {
    return false;
  }
  
  @Override
  public String getDisplay() {
    return null;
  }

  @Override
  public boolean hasDisplay() {
    return false;
  }
  
----

-- CodeSystem --
  public PropertyComponent getProperty(String code) {
    for (PropertyComponent pd : getProperty()) {
      if (pd.getCode().equalsIgnoreCase(code))
        return pd;
    }
    return null;
  }
----

-- Quantity --

      @Override
      public String getVersion() {
        return null;
      }

      @Override
      public boolean hasVersion() {
        return false;
      }

      @Override
      public boolean supportsVersion() {
        return false;
      }

      @Override
      public String getDisplay() {
        return null;
      }

      @Override
      public boolean hasDisplay() {
        return false;
      }

      @Override
      public boolean supportsDisplay() {
        return false;
      }


----

-- Coding --
      @Override
      public boolean supportsVersion() {
        return true;
      }

      @Override
      public boolean supportsDisplay() {
        return true;
      }

----

